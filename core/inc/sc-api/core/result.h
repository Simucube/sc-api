/**
 * @file
 * @brief
 *
 */

#ifndef SC_API_CORE_RESULT_H_
#define SC_API_CORE_RESULT_H_
#include <cstdint>

#include "protocol/commands.h"

namespace sc_api {

/** Known result codes from functions and commands
 *
 * Implementations must consider all non-zero values as error even if they are not listed here as future
 * versions may add additional error codes.
 */
enum class ResultCode : int32_t {
    ok                        = SC_API_PROTOCOL_OK,

    /** Command argument data is invalid */
    error_invalid_argument    = SC_API_PROTOCOL_ERROR_INVALID_ARGUMENT,

    /** Command request format is invalid */
    error_invalid_format      = SC_API_PROTOCOL_ERROR_INVALID_FORMAT,

    /** Command isn't supported */
    error_not_supported       = SC_API_PROTOCOL_ERROR_NOT_SUPPORTED,

    /** Command cannot be executed because of the state of the session
     *
     * Usually caused by trying to execute commands for a closed session
     */
    error_invalid_state       = SC_API_PROTOCOL_ERROR_NO_RESOURCE,

    /** First command must always be "core:register" */
    error_not_registered      = SC_API_PROTOCOL_ERROR_NOT_REGISTERED,

    /** Command requires control flag that wasn't requested or approved */
    error_no_control          = SC_API_PROTOCOL_ERROR_NO_CONTROL,

    /** */
    error_incompatible        = SC_API_PROTOCOL_ERROR_INCOMPATIBLE,

    /** Internal communication occured within SC-API implementation
     *
     * Most likely device that should have received the command, disconnected before command was executed.
     */
    error_internal_comm_error = SC_API_PROTOCOL_ERROR_INTERNAL_COMM_ERROR,

    /** Some unknown error occured within the SC-API implementation.
     *
     * This shouldn't occur and is a bug in the implementation.
     */
    error_internal            = SC_API_PROTOCOL_ERROR_INTERNAL,

    /** Last possible error code returned by the backend */
    command_error_mask        = SC_API_PROTOCOL_ERROR_MASK,

    // Following error codes are only generated by this library and are not returned by the backend commands

    /** Function failed because it requires some other session state
     *
     * Eg. trying to interract with session after it has been closed or controlling without attempting to register first
     */
    error_invalid_session_state,

    /** */
    error_busy,

    /** Operation timed-out */
    error_timeout,

    /** Connecting to backend failed
     *
     * This can occur when attempting to form session or when trying to register for controlling
     */
    error_cannot_connect,

    /** Error parsing responses from Backend. Should not happen if backend version is compatible with this version */
    error_protocol,

};

}  // namespace sc_api

#endif  // SC_API_CORE_RESULT_H_
